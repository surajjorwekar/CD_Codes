//******************(Lex.l)***************************************
%{
#include<stdio.h>
#include<math.h>
#include"y.tab.h"
extern YYSTYPE yylval;
%}
%%
[0-9]+ {yylval.d = atoi(yytext); return NUM; }
"+"|"-"|"*"|"/" {return yytext[0];}
 %["\n"|"\t"|" "] {return yytext[0];}
"\n"|" "|"\t" {return yytext[0];}
[0-9]+"."[0-9]+  {yylval.d=atof(yytext);return (NUM); }
"sin"   {return(SIN);}
"cos"   {return(COS);}
"tan"   {return(TAN);}
"sqrt"   {return(ROOT);}
"("|")"

%%
int yywrap()
{
return 1;
}
//*****************(parse_scientific_calc.y)************************
%{
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
%}
%union {
double d;
}
%left '+' '-'
%left '*' '/'
%token SIN COS TAN ROOT
%token <d> NUM
%start SL
%type <d> S E
%%
SL: S SL	
	| S
;
S : E '\n' {printf("Answer : %lf\n",$1);}
;
E: E'+'E {$$=$1+$3;}
  |E'-'E {$$=$1-$3;}
  |E'*'E {$$=$1*$3;}
  |E'/'E {$$=$1/$3;}
  |NUM {$$=$1;}
  |'('E')' {$$=$2;}
  |SIN E {$$ = sin($2*3.141/180);}
  |COS E {$$ = cos($2*3.141/180);}
  |TAN E {$$ = tan($2*3.141/180);}
  |ROOT E {$$ = sqrt($2);}

%%
int main()
{
yyparse();
return 0;
}

//*********************************************************
hduser@ubuntu:~/Desktop/CD$ lex lex.l
hduser@ubuntu:~/Desktop/CD$ yacc -d parse_scientific_calc.y
parse_scientific_calc.y: warning: 16 shift/reduce conflicts [-Wconflicts-sr]
hduser@ubuntu:~/Desktop/CD$ gcc lex.yy.c y.tab.c -ll -ly -lm
hduser@ubuntu:~/Desktop/CD$ ./a.out 
2+6
Answer : 8.000000
2-3
Answer : -1.000000
2*3
Answer : 6.000000
2/3
Answer : 0.666667
sin(2)
Answer : 0.034893
cos(5)
Answer : 0.996196
tan(5)
Answer : 0.087472
sqrt(5)
Answer : 2.236068
2+3*4
Answer : 14.000000
6*4+sqrt(4)
Answer : 26.000000
//*********************************************************

